#!/data/data/com.termux/files/usr/bin/bash
# bdbackup - Bangladeshi Backup Tool

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

BACKUP_DIR="$HOME/termux-backups"
CONFIG_DIR="$HOME/.config/bdtermux"

show_help() {
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════╗"
    echo "║        🇧🇩 BD BACKUP TOOL       ║"
    echo "║      Created by Masum Vai       ║"
    echo "╚══════════════════════════════════╝"
    echo -e "${NC}"
    echo -e "${YELLOW}Usage:${NC}"
    echo "  bdbackup create [name]     - Create backup"
    echo "  bdbackup list              - List backups"
    echo "  bdbackup restore <name>    - Restore backup"
    echo "  bdbackup clean             - Clean old backups"
}

create_backup() {
    local backup_name=${1:-"backup_$(date +%Y%m%d_%H%M%S)"}
    local backup_file="$BACKUP_DIR/$backup_name.tar.gz"
    
    echo -e "${YELLOW}📦 Creating backup: $backup_name${NC}"
    mkdir -p "$BACKUP_DIR"
    
    # Important directories to backup
    important_dirs=(
        "$HOME/.termux"
        "$HOME/.config"
        "$PREFIX/etc"
        "$HOME/scripts"
    )
    
    # Create backup
    if tar -czf "$backup_file" "${important_dirs[@]}" 2>/dev/null; then
        backup_size=$(du -h "$backup_file" | awk '{print $1}')
        echo -e "${GREEN}✅ Backup created: $backup_name.tar.gz ($backup_size)${NC}"
        echo -e "${BLUE}📍 Location: $BACKUP_DIR/${NC}"
    else
        echo -e "${RED}❌ Backup creation failed${NC}"
    fi
}

list_backups() {
    if [ ! -d "$BACKUP_DIR" ]; then
        echo -e "${RED}❌ No backups found${NC}"
        return 1
    fi
    
    echo -e "${YELLOW}📋 Available backups:${NC}"
    ls -la "$BACKUP_DIR"/*.tar.gz 2>/dev/null | while read backup; do
        if [ -f "$backup" ]; then
            name=$(basename "$backup")
            size=$(du -h "$backup" | awk '{print $1}')
            date=$(stat -c %y "$backup" 2>/dev/null | cut -d' ' -f1)
            echo -e "${GREEN}📁 $name${NC} - Size: $size - Date: $date"
        fi
    done
}

restore_backup() {
    if [ -z "$1" ]; then
        echo -e "${RED}❌ Backup name required${NC}"
        echo "Usage: bdbackup restore <backup-name>"
        return 1
    fi
    
    local backup_file="$BACKUP_DIR/$1.tar.gz"
    
    if [ ! -f "$backup_file" ]; then
        echo -e "${RED}❌ Backup not found: $1${NC}"
        return 1
    fi
    
    echo -e "${YELLOW}🔄 Restoring backup: $1${NC}"
    echo -e "${RED}⚠️  This will overwrite existing files!${NC}"
    read -p "Continue? (y/N): " confirm
    
    if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
        if tar -xzf "$backup_file" -C /; then
            echo -e "${GREEN}✅ Backup restored successfully!${NC}"
        else
            echo -e "${RED}❌ Restore failed${NC}"
        fi
    else
        echo -e "${YELLOW}❌ Restore cancelled${NC}"
    fi
}

clean_backups() {
    echo -e "${YELLOW}🧹 Cleaning old backups...${NC}"
    
    # Keep only last 5 backups
    backup_count=$(ls "$BACKUP_DIR"/*.tar.gz 2>/dev/null | wc -l)
    
    if [ "$backup_count" -gt 5 ]; then
        ls -t "$BACKUP_DIR"/*.tar.gz | tail -n +6 | while read old_backup; do
            echo -e "${BLUE}🗑️ Removing: $(basename "$old_backup")${NC}"
            rm "$old_backup"
        done
        echo -e "${GREEN}✅ Cleanup completed${NC}"
    else
        echo -e "${GREEN}✅ No old backups to clean${NC}"
    fi
}

# Main logic
case "$1" in
    create|make)
        create_backup "$2"
        ;;
    list|ls)
        list_backups
        ;;
    restore|load)
        restore_backup "$2"
        ;;
    clean|cleanup)
        clean_backups
        ;;
    *)
        show_help
        ;;
esac