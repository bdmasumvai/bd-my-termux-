cat > bin/bdbackup << 'EOF'
#!/data/data/com.termux/files/usr/bin/bash

# BD Backup System Pro
# Enterprise Grade Backup Solution

BACKUP_DIR="$HOME/backups"
CONFIG_DIR="$HOME/.bdtermux"

show_help() {
    echo "BD Backup System Pro"
    echo "===================="
    echo "Usage: bdbackup [command]"
    echo ""
    echo "Commands:"
    echo "  create [name]    Create backup"
    echo "  list             List backups"
    echo "  restore <name>   Restore backup"
    echo "  clean            Clean old backups"
}

create_backup() {
    local backup_name="${1:-backup_$(date +%Y%m%d_%H%M%S)}"
    local backup_path="$BACKUP_DIR/$backup_name.tar.gz"
    
    mkdir -p "$BACKUP_DIR"
    
    echo "💾 Creating backup: $backup_name"
    echo "This may take a moment..."
    
    # Backup important directories
    tar -czf "$backup_path" \
        "$HOME/.termux" \
        "$HOME/.bashrc" \
        "$HOME/.zshrc" \
        "$CONFIG_DIR" \
        2>/dev/null
    
    if [ $? -eq 0 ]; then
        backup_size=$(du -h "$backup_path" | awk '{print $1}')
        echo "✅ Backup created: $backup_name.tar.gz ($backup_size)"
    else
        echo "❌ Backup creation failed"
    fi
}

list_backups() {
    if [ ! -d "$BACKUP_DIR" ]; then
        echo "❌ No backups found"
        return 1
    fi
    
    echo "📋 Available Backups:"
    echo "====================="
    ls -la "$BACKUP_DIR"/*.tar.gz 2>/dev/null | while read -r backup; do
        if [ -f "$backup" ]; then
            name=$(basename "$backup")
            size=$(du -h "$backup" | awk '{print $1}')
            echo "📦 $name ($size)"
        fi
    done
}

clean_backups() {
    if [ ! -d "$BACKUP_DIR" ]; then
        echo "❌ No backups directory found"
        return 1
    fi
    
    echo "🧹 Cleaning old backups..."
    backup_count=$(ls "$BACKUP_DIR"/*.tar.gz 2>/dev/null | wc -l)
    
    if [ "$backup_count" -gt 5 ]; then
        ls -t "$BACKUP_DIR"/*.tar.gz | tail -n +6 | while read -r old_backup; do
            echo "🗑️  Removing: $(basename "$old_backup")"
            rm "$old_backup"
        done
        echo "✅ Cleanup completed"
    else
        echo "✅ No old backups to clean"
    fi
}

# Main command handler
case "${1}" in
    create)
        create_backup "$2"
        ;;
    list)
        list_backups
        ;;
    clean)
        clean_backups
        ;;
    restore)
        echo "🔄 Restore feature coming soon..."
        ;;
    *)
        show_help
        ;;
esac
EOF

chmod +x bin/bdbackup